package com.example.proekt.controller;

import com.example.proekt.domain.Clicker;
import com.example.proekt.domain.Message;
import com.example.proekt.domain.NewsMessages;
import com.example.proekt.domain.User;
import com.example.proekt.repos.ClickerRepo;
import com.example.proekt.repos.MessageRepo;
import com.example.proekt.repos.NewsMessageRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import java.io.File;
import java.io.IOException;
import java.util.*;

@Controller
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MessageRepo messageRepo;

    @Autowired
    private NewsMessageRepo newsMessagesRepo;

    @Autowired
    private ClickerRepo clickerRepo;

    @Value("${upload.path}")
    private String uploadPath;

    @GetMapping("/")
    public String greeting() {
        return "greeting";
    }

    @GetMapping("/news")
    public String news(@RequestParam(required = false, defaultValue = "") String filter, Model model) {
        Iterable<NewsMessages> messages;

        if (filter != null && !filter.isEmpty()) {
            messages = newsMessagesRepo.findByTag(filter);
        } else {
            messages = newsMessagesRepo.findAll();
        }

        model.addAttribute("messages", messages);
        model.addAttribute("filter", filter);

        return "news";
    }

    @PostMapping("/news")
    public String addNews(
            @AuthenticationPrincipal User user,
            @Valid NewsMessages message,
            BindingResult bindingResult,
            Model model,
            @RequestParam("file") MultipartFile file
    ) throws IOException {
        message.setAuthor(user);

        if (bindingResult.hasErrors()) {
            Map<String, String> errorsMap = ControllerUtils.getErrors(bindingResult);

            model.mergeAttributes(errorsMap);
            model.addAttribute("message", message);
        } else {
            saveFileNews(message, file);

            model.addAttribute("message", null);

            newsMessagesRepo.save(message);
        }

        Iterable<NewsMessages> messages = newsMessagesRepo.findAll();

        model.addAttribute("messages", messages);

        return "redirect:/news";
    }

    private void saveFileNews(@Valid NewsMessages message, @RequestParam("file") MultipartFile file) throws IOException {
        if (file != null && !file.getOriginalFilename().isEmpty()) {
            File uploadDir = new File(uploadPath);

            if (!uploadDir.exists()) {
                uploadDir.mkdir();
            }

            String uuidFile = UUID.randomUUID().toString();
            String resultFilename = uuidFile + "." + file.getOriginalFilename();

            file.transferTo(new File(uploadPath + "/" + resultFilename));

            message.setFilename(resultFilename);
        }
    }

    @GetMapping("/main")
    public String main(@RequestParam(required = false, defaultValue = "") String filter, Model model) {
        Iterable<Message> messages = messageRepo.findAll();

        if (filter != null && !filter.isEmpty()) {
            messages = messageRepo.findByTag(filter);
        } else {
            messages = messageRepo.findAll();
        }

        model.addAttribute("messages", messages);
        model.addAttribute("filter", filter);

        return "main";
    }

    @PostMapping("/main")
    public String add(
            @AuthenticationPrincipal User user,
            @Valid Message message,
            BindingResult bindingResult,
            Model model,
            @RequestParam("file") MultipartFile file
    ) throws IOException {
        message.setAuthor(user);

        if (bindingResult.hasErrors()) {
            Map<String, String> errorsMap = ControllerUtils.getErrors(bindingResult);

            model.mergeAttributes(errorsMap);
            model.addAttribute("message", message);
        } else {
            saveFile(message, file);

            model.addAttribute("message", null);

            messageRepo.save(message);
        }

        return "redirect:/main";
    }

    private void saveFile(@Valid Message message, @RequestParam("file") MultipartFile file) throws IOException {
        if (file != null && !file.getOriginalFilename().isEmpty()) {
            File uploadDir = new File(uploadPath);

            if (!uploadDir.exists()) {
                uploadDir.mkdir();
            }

            String uuidFile = UUID.randomUUID().toString();
            String resultFilename = uuidFile + "." + file.getOriginalFilename();

            file.transferTo(new File(uploadPath + "/" + resultFilename));

            message.setFilename(resultFilename);
        }
    }

    @GetMapping("/puzzle")
    public String Puzzle(
            @RequestParam(value = "href", required = false) String href,
            @RequestParam(value = "difficult", required = false) Long difficult,
            Model model
    ){

        model.addAttribute("href", href);
        model.addAttribute("difficult", difficult);
        return "puzzle";
    }

    @PostMapping("/puzzle")
    public String addMessageInPuzzle(
            @AuthenticationPrincipal User user,
            @Valid Message message,
            BindingResult bindingResult,
            Model model
    ) {
        message.setAuthor(user);

        if (bindingResult.hasErrors()) {
            Map<String, String> errorsMap = ControllerUtils.getErrors(bindingResult);

            model.mergeAttributes(errorsMap);
            model.addAttribute("message", message);
        } else {
            model.addAttribute("message", null);

            messageRepo.save(message);
        }

        return "redirect:/main";
    }

    @GetMapping("/clicker")
    public String clicker(
            @RequestParam("id") Clicker clicker,
            Model model
    ){
        model.addAttribute("clicker", clicker);
        return "clicker";
    }

    @PostMapping("/clicker")
    public String clickerP(
            @AuthenticationPrincipal User user,
            @RequestParam("id") Long id,
            @Valid Clicker clicker
    ) {
        clicker.setId(id);
        clicker.setAuthor(user);
        clickerRepo.save(clicker);
        return "clicker";
    }

    @GetMapping("/user-messages/{user}")
    public String userMessages(
            @AuthenticationPrincipal User currentUser,
            @PathVariable(name = "user") User user,
            Model model,
            @RequestParam(required = false) Message message
    ){
        Set<Message> messages = user.getMessages();

        model.addAttribute("messages", messages);
        model.addAttribute("message", message);
        model.addAttribute("isCurrentUser", currentUser.equals(user));

        return "userMessages";
    }

    @PostMapping("/user-messages/{user}")
    public String updateMessage(
            @AuthenticationPrincipal User currentUser,
            @PathVariable Long user,
            @RequestParam("id") Message message,
            @RequestParam("text") String text,
            @RequestParam("tag") String tag,
            @RequestParam("file") MultipartFile file
    ) throws IOException {
        if (message.getAuthor().equals(currentUser) || currentUser.isAdmin()) {
            if (!StringUtils.isEmpty(text)) {
                message.setText(text);
            }

            if (!StringUtils.isEmpty(tag)) {
                message.setTag(tag);
            }

            saveFile(message, file);

            messageRepo.save(message);
        }

        return "redirect:/user-messages/" + user;
    }

    @PostMapping("/user-messages/{user}/delete")
    public String deleteMessage(
            @AuthenticationPrincipal User currentUser,
            @PathVariable Long user,
            @RequestParam("id") Message message
    ){
        if (message.getAuthor().equals(currentUser) || currentUser.isAdmin()) {
            messageRepo.delete(message);
        }

        return "redirect:/main";
    }
}